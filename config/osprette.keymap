#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define MAIN 0
#define SYM 1
#define NUM 2
#define NAV 3
#define FN 4
#define NAVA 5

&lt {
    flavor = "balanced";
    tapping_term_ms = <250>;
};

/ {
    behaviors {
        qe: comma_pipe {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_PIPE";
            #binding-cells = <0>;
            bindings = <&kp LS(MINUS)>, <&kp N1>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        
         hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_j {
            timeout-ms = <30>;
            key-positions = <0 10>;
            bindings = <&qe>;
            layers = <0>;
        };

        combo_q {
            timeout-ms = <30>;
            key-positions = <1 11>;
            bindings = <&kp LS(N2)>;
            layers = <0>;
        };

        combo_esc {
            timeout-ms = <30>;
            key-positions = <3 13>;
            bindings = <&kp EQUAL>;
            layers = <0>;
        };

        combo_tab {
            timeout-ms = <30>;
            key-positions = <5 15>;
            bindings = <&kp TAB>;
            layers = <0>;
        };
    
           combo_enter {
            timeout-ms = <30>;
            key-positions = <6 16>;
            bindings = <&kp ENTER>;
            layers = <0>; 
            
         };
            combo_bspc{
            timeout-ms = <30>;
            key-positions = <7 17>;
            bindings = <&kp RC(BSPC)>;
            layers = <0>; 
         };        
            combo_minus{
            timeout-ms = <30>;
            key-positions = <2 12>;
            bindings = <&kp SLASH>;
            layers = <0>; 
         };        
          combo_la {
            timeout-ms = <30>;
            key-positions = <10 21>;
            bindings = <&kp LALT>;
            layers = <0>;
        };

        combo_ls {
            timeout-ms = <30>;
            key-positions = <11 22>;
            bindings = <&kp LSHIFT>;
            layers = <0>;
        };

        combo_lc {
            timeout-ms = <30>;
            key-positions = <12 23>;
            bindings = <&kp LCTRL>;
            layers = <0>;
        };
    
           combo_rc {
            timeout-ms = <30>;
            key-positions = <15 26>;
            bindings = <&kp RCTRL>;
            layers = <0>; 
        };

        combo_rs {
            timeout-ms = <30>;
            key-positions = <16 27>;
            bindings = <&kp LSHIFT>;
            layers = <0>;            
 
         };        
           combo_ra {
            timeout-ms = <30>;
            key-positions = <17 28>;
            bindings = <&kp LALT>;
            layers = <0>; 
         };          
    };

    keymap {
        compatible = "zmk,keymap";

        MAIN_layer {
            bindings = <
                      &kp U &kp O &kp B        &kp COMMA        &kp P    &kp K &kp L &kp M
          &kp Y &kp I &kp A &kp E &kp  S  &kp DOT            &kp F    &kp  D    &kp N        &kp T      &kp G &kp C
                &kp LBKT &kp SQT &kp SEMI &kp Q  &kp X      &lt SYM Z   &kp H    &kp W        &kp J      &kp V
                                  &lt LSHIFT SPC &mo NUM      &lt FN R    &lt NAVA R
            >;
        };

        SYM_layer {
            bindings = <
                              &kp LS(LC(TAB)) &kp LC(TAB) &caps_word &none          &kp TILDE &kp LBRC  &kp RBRC &kp HASH
   &kp LA(LEFT) &kp LA(RIGHT) &sk LALT        &sk LCTRL   &sk LSHFT &kp PSCRN      &kp LT    &kp LPAR  &kp RPAR &kp GT   &kp BSLH  &kp EXCL
                &none         &kp LC(W)       &kp LC(Q)   &sk LGUI   &none          &kp GRAVE &kp LBKT  &kp RBKT &kp AT   &kp PRCNT
                                                          &none      &none          &kp BSPC  &kp ENTER
            >;
        };

        NUM_layer {
            bindings = <
                         &kp N7 &kp N8 &kp N9  &kp N0       &none &caps_word &kp CAPS     &none
         &none &kp CARET &kp N1 &kp N2 &kp N3  &kp EQUAL      &none &sk RSHFT &sk RCTRL    &sk RALT  &none &none
               &none     &kp N4 &kp N5 &kp N6  &kp PLUS       &none &sk RGUI   &sk LS(RGUI) &kp LC(C) &none
                                       &none &none         &none &none
            >;
        };

        NAV_layer {
            bindings = <
                         &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT &kp C_MUTE      &sk RALT    &kp TAB     &kp ENTER &kp LG(Q)
     &kp C_PREV &kp LEFT &kp DOWN     &kp UP       &kp RIGHT  &kp C_PP        &sk RA(GUI) &kp LG(LEFT)  &kp LG(DOWN)  &kp LG(UP) &kp LG(RIGHT) &none
                &kp HOME &kp PG_DN    &kp PG_UP    &kp END    &kp C_STOP      &sk RCTRL   &kp LG(ENTER) &kp LG(O)     &kp LG(N)  &sk RA(RCTRL)
                                                   &none      &none           &kp DEL     &sk RSHFT
            >;
        };

        FN_layer {
            bindings = <
                      &kp F7 &kp F8 &kp F9 &kp F10      &none &kp C_BRI_DN &kp C_BRI_UP &none
          &none &none &kp F1 &kp F2 &kp F3 &kp F11      &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4
                &none &kp F4 &kp F5 &kp F6 &kp F12      &none &bt BT_CLR   &none        &none        &none
                                    &none  &none        &none &none
            >;
        };
        
        NAVA_layer {
            bindings = <
                         &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT &kp C_MUTE      &sk RALT    &kp TAB     &kp ENTER &kp LG(Q)
     &kp C_PREV &kp LS(SLASH) &kp COMMA     &kp DOT  &kp LS(N2)  &kp C_PP        &sk RA(GUI) &kp LEFT  &kp UP  &kp DOWN &kp RIGHT &none
                &kp HOME &kp PG_DN    &kp PG_UP    &kp END    &kp C_STOP      &kp BSPC   &kp RC(BSPC) &kp LG(O)     &kp LG(N)  &sk RA(RCTRL)
                                                   &kp LSHFT      &none           &none     &none
            >;
        };        
    };
};
